{"paragraphs":[{"text":"%md\n\nDeveloped by Amber Zaratsian\nOctober 24, 2017\n[https://github.com/abeasock/open_source_demo](https://github.com/abeasock/open_source_demo)","user":"anonymous","dateUpdated":"2017-10-23T17:01:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Developed by Amber Zaratsian<br/>October 24, 2017<br/><a href=\"https://github.com/abeasock/open_source_demo\">https://github.com/abeasock/open_source_demo</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417911_1334576005","id":"20171019-181556_1257382590","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T17:01:57+0000","dateFinished":"2017-10-23T17:01:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:266"},{"text":"%md\n<br>\n<center>\n  <img src=\"https://github.com/abeasock/open_source_demo/blob/master/open_source.png?raw=true\" style=\"width:45%; height:45%; border:0;\" align=\"middle\">\n</center>\n","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<br>\n<center>\n  <img src=\"https://github.com/abeasock/open_source_demo/blob/master/open_source.png?raw=true\" style=\"width:45%; height:45%; border:0;\" align=\"middle\">\n</center>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417918_1331882763","id":"20171018-211406_1726570524","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:267"},{"text":"%md\n\n## Demo Technology\n\n### Docker\nDocker is an open source technology that makes it easier to create, deploy, and run applications by using containers. A container image is a lightweight exectuable that allows developers to package up all the components needed to make their application run, such as tools, libraries and other dependencies, and ship it out as one package. This ensures that the application will run the same regardless of the environment.\n\nFor this demo, I created a `Dockerfile`, which is a text document that contains all the commands a user could call on the command line to assemble an image. The `Docker build` command builds an image from a Dockerfile and a context (set of files).\n\n### Apache Zeppelin\nZeppelin is an open source web-based notebook used for interactive data analysis. Through language interpreters, Zeppelin support multiple languages such as Spark, Python, Scala, Hive, shell and markdown. Specifically designed to integrate well with Spark and Hadoop.\nZeppelin: http://localhost:19090\n\n### Apache Spark\nSpark is an open source cluster computing engine for Big Data. It has built-in modules for machine learning, SQL, streaming, and graph processing. Spark is primarily written in Scala, but provides several APIs for programmers: Scala, Python, Java, and R. I use Spark with Python known as PySpark (Spark Python API).\n\n### Sparkling Water/H2O\nSparkling Water = Spark + H2O. H2O is an open source, in-memory, distributed, fast, and scalable machine learning platform that allows users to build machine learning models on big data. H2O provides support for popular programming languages, such as Python, R, and Scala. Sparkling Water gives users the ability to combine the fast, scalable machine learning algorithms of H2O with the capabilites of Spark. For this demo, I'm using **PySparkling: Python + Spark + H2O**\n\n### Apache Superset (incubating)\nSuperset is an open source data exploration platform created by Airbnb. Intuitive and code-free allowing users to quickly create visualizations and dashboards. In preparation, I used PySpark to make some transformations to the loan data and loaded this data into a local SQLite3 database on my Docker container. In Superset, I connect to this database. \nSuperset: http://localhost:18088\n\n### Flask\nFlask is a web framework in Python. In this demo, I use Flask to deploy my machine learning model in production as an API to enable real-time predictions.\n\n### Apache Livy\nLivy is an open source REST interface for interacting with Apache Spark from anywhere. For this demo, Livy is being used because this version of Zeppelin (0.7.0) currently has a known bug when interacting with H2O. Once this bug is reconciled, this demo will be able to be run using the spark interpreter. ","user":"anonymous","dateUpdated":"2017-10-23T01:19:49+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Demo Technology</h2>\n<h3>Docker</h3>\n<p>Docker is an open source technology that makes it easier to create, deploy, and run applications by using containers. A container image is a lightweight exectuable that allows developers to package up all the components needed to make their application run, such as tools, libraries and other dependencies, and ship it out as one package. This ensures that the application will run the same regardless of the environment.</p>\n<p>For this demo, I created a <code>Dockerfile</code>, which is a text document that contains all the commands a user could call on the command line to assemble an image. The <code>Docker build</code> command builds an image from a Dockerfile and a context (set of files).</p>\n<h3>Apache Zeppelin</h3>\n<p>Zeppelin is an open source web-based notebook used for interactive data analysis. Through language interpreters, Zeppelin support multiple languages such as Spark, Python, Scala, Hive, shell and markdown. Specifically designed to integrate well with Spark and Hadoop.<br/>Zeppelin: <a href=\"http://localhost:19090\">http://localhost:19090</a></p>\n<h3>Apache Spark</h3>\n<p>Spark is an open source cluster computing engine for Big Data. It has built-in modules for machine learning, SQL, streaming, and graph processing. Spark is primarily written in Scala, but provides several APIs for programmers: Scala, Python, Java, and R. I use Spark with Python known as PySpark (Spark Python API).</p>\n<h3>Sparkling Water/H2O</h3>\n<p>Sparkling Water = Spark + H2O. H2O is an open source, in-memory, distributed, fast, and scalable machine learning platform that allows users to build machine learning models on big data. H2O provides support for popular programming languages, such as Python, R, and Scala. Sparkling Water gives users the ability to combine the fast, scalable machine learning algorithms of H2O with the capabilites of Spark. For this demo, I&rsquo;m using <strong>PySparkling: Python + Spark + H2O</strong></p>\n<h3>Apache Superset (incubating)</h3>\n<p>Superset is an open source data exploration platform created by Airbnb. Intuitive and code-free allowing users to quickly create visualizations and dashboards. In preparation, I used PySpark to make some transformations to the loan data and loaded this data into a local SQLite3 database on my Docker container. In Superset, I connect to this database.<br/>Superset: <a href=\"http://localhost:18088\">http://localhost:18088</a></p>\n<h3>Flask</h3>\n<p>Flask is a web framework in Python. In this demo, I use Flask to deploy my machine learning model in production as an API to enable real-time predictions.</p>\n<h3>Apache Livy</h3>\n<p>Livy is an open source REST interface for interacting with Apache Spark from anywhere. For this demo, Livy is being used because this version of Zeppelin (0.7.0) currently has a known bug when interacting with H2O. Once this bug is reconciled, this demo will be able to be run using the spark interpreter.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417919_1331498014","id":"20171019-145807_554233463","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T01:19:49+0000","dateFinished":"2017-10-23T01:19:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:268"},{"text":"%md\n\n## Analytics Life Cycle\n\n<br>\n<center>\n  <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/CRISP-DM_Process_Diagram.png/1024px-CRISP-DM_Process_Diagram.png\" style=\"width:30%; height:30%; border:0;\" align=\"middle\">\n</center>\n","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Analytics Life Cycle</h2>\n<br>\n<center>\n  <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/CRISP-DM_Process_Diagram.png/1024px-CRISP-DM_Process_Diagram.png\" style=\"width:30%; height:30%; border:0;\" align=\"middle\">\n</center>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417920_1415758023","id":"20171019-172733_1184399962","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:269"},{"text":"%md\n\n## I. Business Understanding\n\nLending Club Loan Data ([link](https://www.kaggle.com/wendykan/lending-club-loan-data))\n\nThe dataset from Lending Club contains data for all loans issued through the 2007-2015. The dataset contains almost 900k records and 75 features. A data dictionary is also provided. \n\nThe data contains features of the loan (e.g. loan amount, interest rate, term) and features of the borrower (e.g. employment length, annual income, home ownership).\n\n### **Objective:**\n**To predict if a person will default on a loan**\n<br>","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>I. Business Understanding</h2>\n<p>Lending Club Loan Data (<a href=\"https://www.kaggle.com/wendykan/lending-club-loan-data\">link</a>)</p>\n<p>The dataset from Lending Club contains data for all loans issued through the 2007-2015. The dataset contains almost 900k records and 75 features. A data dictionary is also provided. </p>\n<p>The data contains features of the loan (e.g. loan amount, interest rate, term) and features of the borrower (e.g. employment length, annual income, home ownership).</p>\n<h3><strong>Objective:</strong></h3>\n<p><strong>To predict if a person will default on a loan</strong><br/><br></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417920_1415758023","id":"20171019-120558_2097806897","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:270"},{"text":"%md\n\n## II. Data Understand","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>II. Data Understand</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417921_1415373275","id":"20171019-130046_1713168047","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:271"},{"title":"Import Packages","text":"%livy.pyspark\n\nfrom pyspark.sql import functions as F\nfrom pysparkling import *\nhc = H2OContext.getOrCreate(spark)\nimport h2o\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator","user":"anonymous","dateUpdated":"2017-10-23T21:23:19+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Connecting to H2O server at http://172.18.0.2:54321... successful.\n--------------------------  ----------------------------------------\nH2O cluster uptime:         18 secs\nH2O cluster version:        3.14.0.2\nH2O cluster version age:    2 months and 1 day\nH2O cluster name:           sparkling-water-root_local-1508793810673\nH2O cluster total nodes:    1\nH2O cluster free memory:    692 Mb\nH2O cluster total cores:    2\nH2O cluster allowed cores:  2\nH2O cluster status:         accepting new members, healthy\nH2O connection url:         http://172.18.0.2:54321\nH2O connection proxy:\nH2O internal security:      False\nH2O API Extensions:         XGBoost, Algos, AutoML, Core V3, Core V4\nPython version:             2.7.13 final\n--------------------------  ----------------------------------------"}]},"apps":[],"jobName":"paragraph_1508514417921_1415373275","id":"20171012-235609_1889565056","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T21:23:19+0000","dateFinished":"2017-10-23T21:24:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:272"},{"title":"Import Data","text":"%livy.pyspark\n\nloans = spark.read.csv('/assets/lending_club/loan.csv', header=True, inferSchema=True, quote='\"', escape='\"', mode='DROPMALFORMED')\n\n# Filter columns\nloans = loans[['id', 'loan_status', 'loan_amnt', 'int_rate', 'grade', 'term', 'emp_length', 'purpose', 'home_ownership', 'addr_state', 'annual_inc', 'inq_last_6mths']]\n\n# Print first 5 rows of the DataFrame\nloans.show(5)\n\nprint ' '\nprint 'Column Data Types:'\n\n# Print column data types               \nloans.dtypes","user":"anonymous","dateUpdated":"2017-10-23T21:23:25+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true,"lineNumbers":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-----------+---------+--------+-----+----------+----------+--------------+--------------+----------+----------+--------------+\n|     id|loan_status|loan_amnt|int_rate|grade|      term|emp_length|       purpose|home_ownership|addr_state|annual_inc|inq_last_6mths|\n+-------+-----------+---------+--------+-----+----------+----------+--------------+--------------+----------+----------+--------------+\n|1077501| Fully Paid|   5000.0|   10.65|    B| 36 months| 10+ years|   credit_card|          RENT|        AZ|   24000.0|           1.0|\n|1077430|Charged Off|   2500.0|   15.27|    C| 60 months|  < 1 year|           car|          RENT|        GA|   30000.0|           5.0|\n|1077175| Fully Paid|   2400.0|   15.96|    C| 36 months| 10+ years|small_business|          RENT|        IL|   12252.0|           2.0|\n|1076863| Fully Paid|  10000.0|   13.49|    C| 36 months| 10+ years|         other|          RENT|        CA|   49200.0|           1.0|\n|1075358|    Current|   3000.0|   12.69|    B| 60 months|    1 year|         other|          RENT|        OR|   80000.0|           0.0|\n+-------+-----------+---------+--------+-----+----------+----------+--------------+--------------+----------+----------+--------------+\nonly showing top 5 rows\n\n \nColumn Data Types:\n[('id', 'int'), ('loan_status', 'string'), ('loan_amnt', 'double'), ('int_rate', 'double'), ('grade', 'string'), ('term', 'string'), ('emp_length', 'string'), ('purpose', 'string'), ('home_ownership', 'string'), ('addr_state', 'string'), ('annual_inc', 'double'), ('inq_last_6mths', 'double')]"}]},"apps":[],"jobName":"paragraph_1508514417921_1415373275","id":"20171012-235628_1686246269","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T21:23:26+0000","dateFinished":"2017-10-23T21:24:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:273"},{"title":"Exploratory Analysis","text":"%livy.pyspark\n\nprint 'Number of records: ' + str(loans.count())\n\n# loan_status categories\nprint ' '\nprint 'Loan Status count: '\nloans.groupby('loan_status').count().show(truncate=False)","user":"anonymous","dateUpdated":"2017-10-23T00:49:38+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Number of records: 887379\n \nLoan Status count: \n+---------------------------------------------------+------+\n|loan_status                                        |count |\n+---------------------------------------------------+------+\n|Fully Paid                                         |207723|\n|Default                                            |1219  |\n|In Grace Period                                    |6253  |\n|Does not meet the credit policy. Status:Fully Paid |1988  |\n|Charged Off                                        |45248 |\n|Late (31-120 days)                                 |11591 |\n|Issued                                             |8460  |\n|Current                                            |601779|\n|Does not meet the credit policy. Status:Charged Off|761   |\n|Late (16-30 days)                                  |2357  |\n+---------------------------------------------------+------+"}]},"apps":[],"jobName":"paragraph_1508514417922_1416527521","id":"20171012-235654_1717153436","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T00:50:27+0000","dateFinished":"2017-10-23T00:51:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:274"},{"text":"%livy.pyspark\n\n# Clean up loan statuses\nloans = (loans.withColumn('loan_status', F.when((loans['loan_status']=='Default') | (loans['loan_status']=='Charged Off'), 'default')\n\t\t\t\t\t\t\t\t\t\t  .when((loans['loan_status']=='Current') | (loans['loan_status']=='Fully Paid'), 'no default')\n\t\t\t\t\t\t\t\t\t\t  .otherwise(loans['loan_status'])))\n\n# Filter records for where the loan_status is one of the new categories set above\nloans = loans.filter((loans['loan_status']=='default') | (loans['loan_status']=='no default'))\n\n# Lowercase purpose column to standardize values\nloans = loans.withColumn('purpose', F.lower(loans['purpose']))\n\n# New record count\nprint 'Number of records: ' + str(loans.count())","user":"anonymous","dateUpdated":"2017-10-23T21:23:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Number of records: 855969"}]},"apps":[],"jobName":"paragraph_1508514417922_1416527521","id":"20171019-134637_1290654684","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T21:24:04+0000","dateFinished":"2017-10-23T21:24:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:275"},{"text":"%livy.pyspark\n\n# Min, max, and mean loan amounts\nprint ' '\nprint 'Loan Amount Minimum, Maximum, and Average: '\nloans.agg(F.min('loan_amnt'), F.max('loan_amnt'), F.mean('loan_amnt')).show()\n\n# Min, max, and mean interest rates\nprint ' '\nprint 'Interest Rate Minimum, Maximum, and average: '\nloans.agg(F.min('int_rate'), F.max('int_rate'), F.mean('int_rate')).show()\n\n# term categories\nprint ' '\nprint 'Term count: '\nloans.groupby('term').count().show()\n\n# grade categories\nprint ' '\nprint 'Grade count: '\nloans.orderBy('grade').groupby('grade').count().show()\n\n# home_ownership categories\nprint ' '\nprint 'Home Ownership count: '\nloans.groupby('home_ownership').count().show()\n\n# emp_length categories\nprint ' '\nprint 'Employment Length count: '\nloans.groupby('emp_length').count().show()\n\n# purpose categories\nprint ' '\nprint 'Purpose count: '\nloans.groupby('purpose').count().sort(F.desc('count')).show()\n\n# inq_last_6mths categories\nprint ' '\nprint 'Inquires in the last 6 months count: '\nloans.groupby('inq_last_6mths').count().sort('inq_last_6mths').show()","user":"anonymous","dateUpdated":"2017-10-23T01:24:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{"0":{"graph":{"mode":"table","height":1894,"optionOpen":false}}},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Loan Amount Minimum, Maximum, and Average: \n+--------------+--------------+------------------+\n|min(loan_amnt)|max(loan_amnt)|    avg(loan_amnt)|\n+--------------+--------------+------------------+\n|         500.0|       35000.0|14745.571334943204|\n+--------------+--------------+------------------+\n\n \nInterest Rate Minimum, Maximum, and average: \n+-------------+-------------+------------------+\n|min(int_rate)|max(int_rate)|     avg(int_rate)|\n+-------------+-------------+------------------+\n|         5.32|        28.99|13.192319605043176|\n+-------------+-------------+------------------+\n\n \nTerm count: \n+----------+------+\n|      term| count|\n+----------+------+\n| 36 months|600221|\n| 60 months|255748|\n+----------+------+\n\n \nGrade count: \n+-----+------+\n|grade| count|\n+-----+------+\n|    A|145665|\n|    B|247998|\n|    C|236855|\n|    D|132802|\n|    E| 66448|\n|    F| 21328|\n|    G|  4873|\n+-----+------+\n\n \nHome Ownership count: \n+--------------+------+\n|home_ownership| count|\n+--------------+------+\n|           OWN| 84136|\n|          RENT|342535|\n|      MORTGAGE|429106|\n|           ANY|     3|\n|         OTHER|   144|\n|          NONE|    45|\n+--------------+------+\n\n \nEmployment Length count: \n+----------+------+\n|emp_length| count|\n+----------+------+\n|   9 years| 33462|\n|   5 years| 53812|\n|    1 year| 54855|\n|       n/a| 43061|\n|   2 years| 75986|\n|   7 years| 43204|\n|   8 years| 42421|\n|   4 years| 50643|\n|   6 years| 41446|\n|   3 years| 67392|\n| 10+ years|282090|\n|  < 1 year| 67597|\n+----------+------+\n\n \nPurpose count: \n+------------------+------+\n|           purpose| count|\n+------------------+------+\n|debt_consolidation|505392|\n|       credit_card|200144|\n|  home_improvement| 49956|\n|             other| 40949|\n|    major_purchase| 16587|\n|    small_business|  9785|\n|               car|  8593|\n|           medical|  8193|\n|            moving|  5160|\n|          vacation|  4542|\n|             house|  3513|\n|           wedding|  2280|\n|  renewable_energy|   549|\n|       educational|   326|\n+------------------+------+\n\n \nInquires in the last 6 months count: \n+--------------+------+\n|inq_last_6mths| count|\n+--------------+------+\n|           0.0|482665|\n|           1.0|232983|\n|           2.0| 90479|\n|           3.0| 35902|\n|           4.0|  9589|\n|           5.0|  3359|\n|           6.0|   922|\n|           7.0|    48|\n|           8.0|    22|\n+--------------+------+"}]},"apps":[],"jobName":"paragraph_1508514417929_1412295283","id":"20171019-134606_27417062","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T01:20:03+0000","dateFinished":"2017-10-23T01:22:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:276"},{"text":"%md\n\n## III. Data Preparation\n","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>III. Data Preparation</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417933_1410756288","id":"20171019-130202_783714179","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:277"},{"title":"Data Transformations","text":"%livy.pyspark\n\n# Clean up home ownership\nloans = (loans.withColumn('home_ownership', F.when((loans['home_ownership']=='OWN_MORTGAGE') |(loans['home_ownership']=='MORTGAGE'), 'OWN')\n\t\t\t  .when(loans['home_ownership']=='RENT', 'RENT')\n\t\t\t  .otherwise('OTHER')))\n\nloans = loans.drop('int_rate').drop('grade')\n\nloans.show(10)","user":"anonymous","dateUpdated":"2017-10-23T21:23:36+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-----------+---------+----------+----------+------------------+--------------+----------+----------+--------------+\n|     id|loan_status|loan_amnt|      term|emp_length|           purpose|home_ownership|addr_state|annual_inc|inq_last_6mths|\n+-------+-----------+---------+----------+----------+------------------+--------------+----------+----------+--------------+\n|1077501| no default|   5000.0| 36 months| 10+ years|       credit_card|          RENT|        AZ|   24000.0|           1.0|\n|1077430|    default|   2500.0| 60 months|  < 1 year|               car|          RENT|        GA|   30000.0|           5.0|\n|1077175| no default|   2400.0| 36 months| 10+ years|    small_business|          RENT|        IL|   12252.0|           2.0|\n|1076863| no default|  10000.0| 36 months| 10+ years|             other|          RENT|        CA|   49200.0|           1.0|\n|1075358| no default|   3000.0| 60 months|    1 year|             other|          RENT|        OR|   80000.0|           0.0|\n|1075269| no default|   5000.0| 36 months|   3 years|           wedding|          RENT|        AZ|   36000.0|           3.0|\n|1069639| no default|   7000.0| 60 months|   8 years|debt_consolidation|          RENT|        NC|   47004.0|           1.0|\n|1072053| no default|   3000.0| 36 months|   9 years|               car|          RENT|        CA|   48000.0|           2.0|\n|1071795|    default|   5600.0| 60 months|   4 years|    small_business|         OTHER|        CA|   40000.0|           2.0|\n|1071570|    default|   5375.0| 60 months|  < 1 year|             other|          RENT|        TX|   15000.0|           0.0|\n+-------+-----------+---------+----------+----------+------------------+--------------+----------+----------+--------------+\nonly showing top 10 rows"}]},"apps":[],"jobName":"paragraph_1508514417933_1410756288","id":"20171013-002002_841845324","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T21:24:22+0000","dateFinished":"2017-10-23T21:24:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:278"},{"text":"%md\n\n## IV. Modeling & V. Evaluation\n\nThe algorithm being used is Gradient Boosting Machine (GBM). GBM produces a prediction model in the form of a forward learning ensemble method. \n[H2O GBM Documentation](http://docs.h2o.ai/h2o/latest-stable/h2o-docs/data-science/gbm.html)","user":"anonymous","dateUpdated":"2017-10-23T17:33:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>IV. Modeling &amp; V. Evaluation</h2>\n<p>The algorithm being used is Gradient Boosting Machine (GBM). GBM produces a prediction model in the form of a forward learning ensemble method.<br/><a href=\"http://docs.h2o.ai/h2o/latest-stable/h2o-docs/data-science/gbm.html\">H2O GBM Documentation</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417934_1411910534","id":"20171019-130318_829926395","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T17:33:20+0000","dateFinished":"2017-10-23T17:33:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:279"},{"title":"Model 1: Preparation","text":"%livy.pyspark\n\n# Convert PySpark DataFrame to an H2O DataFrame\nloansHF = hc.as_h2o_frame(loans, framename='loans')\n\n# Convert string variables into factors\nstring_vars = [i[0] for i in loansHF.types.iteritems() if i[1]=='string']\nfor var in string_vars:\n    loansHF[var] = loansHF[var].asfactor()\n    \n# Split dataset in to training, testing, and validation\ntraining, testing, validation = loansHF.split_frame([0.7, 0.2], seed=12345)\n\n# Define target variable\ntarget = 'loan_status'\n\n# Define predictors\npredictors = loansHF.names[:]\npredictors.remove(target)\npredictors.remove('id')     \n","user":"anonymous","dateUpdated":"2017-10-23T00:50:13+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1508514417934_1411910534","id":"20171014-141319_1623632317","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T00:51:38+0000","dateFinished":"2017-10-23T00:52:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:280"},{"title":"Model 1: Modeling","text":"%livy.pyspark\n\n# Modeling\ngbm_regressor = H2OGradientBoostingEstimator(ntrees=50, max_depth=6, learn_rate=0.1, distribution='bernoulli')\n\n# Train the model\ngbm_regressor.train(x=predictors, y=target, training_frame=training, validation_frame=validation)\n\n\n# Metrics\nprint gbm_regressor.varimp(True)\nprint gbm_regressor.accuracy()\nprint gbm_regressor.confusion_matrix(train = True)\nprint gbm_regressor.auc(train=True)\n\n# Predictions\ngbm_regressor.model_performance(testing)\npredictions = gbm_regressor.predict(testing)\npredictions.head()\n","user":"anonymous","dateUpdated":"2017-10-23T00:50:23+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"gbm Model Build progress: [###############################################] 100%\n         variable  relative_importance  scaled_importance  percentage\n0      addr_state          1155.276978           1.000000    0.229420\n1  inq_last_6mths           997.542542           0.863466    0.198096\n2      annual_inc           816.799927           0.707017    0.162204\n3         purpose           773.052429           0.669149    0.153516\n4       loan_amnt           548.835693           0.475068    0.108990\n5            term           320.181030           0.277147    0.063583\n6      emp_length           318.259369           0.275483    0.063201\n7  home_ownership           105.700424           0.091494    0.020990\n[[0.678723988408838, 0.9459351221465759]]\nConfusion Matrix (Act/Pred) for max f1 @ threshold = 0.678723988409: \n            default    no default    Error    Rate\n----------  ---------  ------------  -------  ------------------\ndefault     422        32190         0.9871   (32190.0/32612.0)\nno default  210        566458        0.0004   (210.0/566668.0)\nTotal       632        598648        0.0541   (32400.0/599280.0)\n\n0.69044380165\ngbm prediction progress: [################################################] 100%\npredict       default    no default\n----------  ---------  ------------\nno default  0.0949262      0.905074\nno default  0.137796       0.862204\nno default  0.0820386      0.917961\nno default  0.114888       0.885112\nno default  0.0304045      0.969595\nno default  0.0651173      0.934883\nno default  0.0691771      0.930823\nno default  0.047272       0.952728\nno default  0.044344       0.955656\nno default  0.14563        0.85437\n\n[10 rows x 3 columns]"}]},"apps":[],"jobName":"paragraph_1508514417935_1411525786","id":"20171015-235355_1202584581","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T00:51:38+0000","dateFinished":"2017-10-23T00:53:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:281"},{"text":"%md\n\n#### Imbalanced Data\n\nThe number of defaults is small compared to the total number of loans. By using the data as-is to train the model above, I do not build a very good model to identify those likely to default. \n\nLet's test undersampling the data and building a model. Undersampling will drop some of the \"no default\" samples at random to give a balanced dataset with almost equal class distribution.","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Imbalanced Data</h4>\n<p>The number of defaults is small compared to the total number of loans. By using the data as-is to train the model above, I do not build a very good model to identify those likely to default. </p>\n<p>Let&rsquo;s test undersampling the data and building a model. Undersampling will drop some of the &ldquo;no default&rdquo; samples at random to give a balanced dataset with almost equal class distribution.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417935_1411525786","id":"20171019-182522_1219234783","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:282"},{"title":"Model 2: Preparation","text":"%livy.pyspark\n\n# Create equal split of \"default\" and \"no default\" records\nnumber_of_no_defaults = loans.groupBy('loan_status').count().filter(loans['loan_status']=='no default').collect()[0][1]\nnumber_of_defaults    = loans.groupBy('loan_status').count().filter(loans['loan_status']=='default').collect()[0][1]\nstratified_ratio      = number_of_defaults / float(number_of_no_defaults)\nloans.groupBy('loan_status').count().show()\n\nloans = loans.sampleBy('loan_status', fractions={'default': 1.00, 'no default': stratified_ratio}, seed=4321)\nloans.groupBy('loan_status').count().show()\n\n# Convert PySpark DataFrame to an H2O DataFrame\nloansHF2 = hc.as_h2o_frame(loans)\n\n# Convert string variables into factors\nstring_vars = [i[0] for i in loansHF2.types.iteritems() if i[1]=='string']\nfor var in string_vars:\n    loansHF2[var] = loansHF2[var].asfactor()\n\n# Loan Status Distributions\nloansHF2[\"loan_status\"].table()\n\n# Split dataset in to training, testing, and validation\ntraining2, testing2, validation2 = loansHF2.split_frame([0.7, 0.2], seed=12345)\n\n# Define target variable\ntarget = 'loan_status'\n\n# Define predictors\npredictors = loansHF2.names[:]\npredictors.remove(target)\npredictors.remove('id') ","user":"anonymous","dateUpdated":"2017-10-23T21:27:11+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+-----+\n|loan_status|count|\n+-----------+-----+\n| no default|46738|\n|    default|46467|\n+-----------+-----+\n\n+-----------+-----+\n|loan_status|count|\n+-----------+-----+\n| no default|46490|\n|    default|46467|\n+-----------+-----+"}]},"apps":[],"jobName":"paragraph_1508514417936_1421914006","id":"20171019-182157_317564046","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T21:27:11+0000","dateFinished":"2017-10-23T21:29:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:283"},{"title":"Model 2: Modeling","text":"%livy.pyspark\n\n# Modeling\ngbm_regressor2 = H2OGradientBoostingEstimator(distribution='bernoulli', ntrees=5, max_depth=3, learn_rate=0.1)\ngbm_regressor2.train(x=predictors, y=target, training_frame=training2, validation_frame=validation2)\n\n# Metrics\nprint gbm_regressor2.varimp(True)\nprint gbm_regressor2.accuracy()\nprint gbm_regressor2.confusion_matrix(train = True)\nprint gbm_regressor2.auc(train=True)\n\n# Predictions\ngbm_regressor2.model_performance(testing2)\npredictions2 = gbm_regressor2.predict(testing2)\npredictions2.head()\n","user":"anonymous","dateUpdated":"2017-10-23T21:39:53+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"gbm Model Build progress: [###############################################] 100%\n         variable  relative_importance  scaled_importance  percentage\n0  inq_last_6mths          1227.270386           1.000000    0.498441\n1      annual_inc           823.266296           0.670811    0.334360\n2         purpose           194.162140           0.158206    0.078857\n3            term           120.072128           0.097837    0.048766\n4      addr_state            72.076485           0.058729    0.029273\n5  home_ownership            25.368515           0.020671    0.010303\n6       loan_amnt             0.000000           0.000000    0.000000\n7      emp_length             0.000000           0.000000    0.000000\n[[0.5073224039242521, 0.59791897208902]]\nConfusion Matrix (Act/Pred) for max f1 @ threshold = 0.450321169226: \n            default    no default    Error    Rate\n----------  ---------  ------------  -------  -----------------\ndefault     4402       28110         0.8646   (28110.0/32512.0)\nno default  1892       30660         0.0581   (1892.0/32552.0)\nTotal       6294       58770         0.4611   (30002.0/65064.0)\n\n0.630955290206\ngbm prediction progress: [################################################] 100%\npredict       default    no default\n----------  ---------  ------------\nno default   0.481136      0.518864\nno default   0.503664      0.496336\nno default   0.531667      0.468333\nno default   0.49985       0.50015\nno default   0.50738       0.49262\nno default   0.453116      0.546884\nno default   0.524182      0.475818\nno default   0.521408      0.478592\nno default   0.429944      0.570056\nno default   0.492548      0.507452\n\n[10 rows x 3 columns]"}]},"apps":[],"jobName":"paragraph_1508514417936_1421914006","id":"20171019-182215_2096938335","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T21:39:53+0000","dateFinished":"2017-10-23T21:39:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:284"},{"title":"Save Model","text":"%livy.pyspark\n\nmodel_path = h2o.save_model(model=gbm_regressor2, path = '/assets/flask_deployment_demo/', force=True)\n\nprint model_path","user":"anonymous","dateUpdated":"2017-10-23T21:40:02+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"/assets/flask_deployment_demo/GBM_model_python_1508793821048_133"}]},"apps":[],"jobName":"paragraph_1508514417937_1421529257","id":"20171015-235428_2090936206","dateCreated":"2017-10-20T15:46:57+0000","dateStarted":"2017-10-23T21:40:02+0000","dateFinished":"2017-10-23T21:40:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:285"},{"text":"%md\n\n## VI. Deployment\n\nTo run the Flask app for this model:\n1) Start the Docker command line and run this code:\n\n    /spark/bin/spark-submit --py-files /sparkling-water-2.1.14/py/build/dist/h2o_pysparkling_2.1-2.1.14.zip /assets/flask_deployment_demo/loan_app_demo.py\n2) Then in your browser go to http://localhost:15555","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>VI. Deployment</h2>\n<p>To run the Flask app for this model:<br/>1) Start the Docker command line and run this code:</p>\n<pre><code>/spark/bin/spark-submit --py-files /sparkling-water-2.1.14/py/build/dist/h2o_pysparkling_2.1-2.1.14.zip /assets/flask_deployment_demo/loan_app_demo.py\n</code></pre>\n<p>2) Then in your browser go to <a href=\"http://localhost:15555\">http://localhost:15555</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417937_1421529257","id":"20171019-175144_1040579909","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:286"},{"text":"%md\n\n## Resources\n\n**Docker** [https://www.docker.com/](https://www.docker.com/)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [- Docker at MetLife](https://www.docker.com/customers/metlife-transforms-customer-experience-legacy-and-microservices-mashup)\n\n**H2O.ai** [https://www.h2o.ai/](https://www.h2o.ai/)\n\n**PySpark Documentation** [http://spark.apache.org/docs/latest/api/python/index.html](http://spark.apache.org/docs/latest/api/python/index.html)\n\n**Superset** [https://superset.incubator.apache.org/](https://superset.incubator.apache.org/)\n\n**Zeppelin** [https://zeppelin.apache.org/](https://zeppelin.apache.org/)\n\n**Lending Club Data** [https://www.kaggle.com/wendykan/lending-club-loan-data](https://www.kaggle.com/wendykan/lending-club-loan-data)","dateUpdated":"2017-10-20T15:46:57+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Resources</h2>\n<p><strong>Docker</strong> <a href=\"https://www.docker.com/\">https://www.docker.com/</a></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href=\"https://www.docker.com/customers/metlife-transforms-customer-experience-legacy-and-microservices-mashup\">- Docker at MetLife</a></p>\n<p><strong>H2O.ai</strong> <a href=\"https://www.h2o.ai/\">https://www.h2o.ai/</a></p>\n<p><strong>PySpark Documentation</strong> <a href=\"http://spark.apache.org/docs/latest/api/python/index.html\">http://spark.apache.org/docs/latest/api/python/index.html</a></p>\n<p><strong>Superset</strong> <a href=\"https://superset.incubator.apache.org/\">https://superset.incubator.apache.org/</a></p>\n<p><strong>Zeppelin</strong> <a href=\"https://zeppelin.apache.org/\">https://zeppelin.apache.org/</a></p>\n<p><strong>Lending Club Data</strong> <a href=\"https://www.kaggle.com/wendykan/lending-club-loan-data\">https://www.kaggle.com/wendykan/lending-club-loan-data</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417938_1422683504","id":"20171019-175207_1084205676","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:287"},{"text":"%md\n\nEnd of Notebook","dateUpdated":"2017-10-20T15:46:57+0000","config":{"colWidth":12,"editorHide":true,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>End of Notebook</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1508514417938_1422683504","id":"20171019-175232_643382834","dateCreated":"2017-10-20T15:46:57+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:288"}],"name":"loans","id":"2CY8ADUMW","angularObjects":{"2CWHFVWDT:shared_process":[],"2CV4TZK9H:shared_process":[],"2CXTYCCMC:shared_process":[],"2CVFJAFD8:shared_process":[],"2CXB32FZZ:shared_process":[],"2CWBQADQ9:shared_process":[],"2CVQCPUB3:shared_process":[],"2CV4PN5PW:shared_process":[],"2CVXT8HJM:shared_process":[],"2CWEBWSZJ:shared_process":[],"2CVV9J23Z:shared_process":[],"2CVAVZAFH:shared_process":[],"2CXKN2DNN:shared_process":[],"2CUVA6D1U:shared_process":[],"2CW15MH65:shared_process":[],"2CWJJAKJ8:shared_process":[],"2CX5X89Q4:shared_process":[],"2CVCVSDY8:shared_process":[],"2CXTHEQRN:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}